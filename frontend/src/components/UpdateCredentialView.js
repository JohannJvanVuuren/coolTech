
/**
 * Dependency modules and hooks
 */
import axios from 'axios';
import {useEffect, useState} from "react";
import {Link} from 'react-router-dom';

/**
 * Import of the other components needed
 */
import {Header} from "./Header";
import {NavigationBar} from "./NavigationBar";

/**
 * import of the main stylesheet generated by the SCSS files and preprocessor
 */
import '../scss/main.css';
/* Import of styled components from React Bootstrap */
import Table from 'react-bootstrap/Table';
import Spinner from 'react-bootstrap/Spinner';


export const UpdateCredentialView = () => {

    /* Declaring and initialising state variable */
    const [isLoading, setIsLoading] = useState(false);

    /* Declaration of the array used for rendering the table data of the credential repos */
    const [userDiscreteCredentials, setUserDiscreteCredentials] = useState([]);

    /*
     * useEffect hook to run the axios call to the backend once to get the credential repo info that
     * needs to be displayed on this page
     */
    useEffect(() => {

        /* The spinner is linked to this state variable. This activates the spinner */
        setIsLoading(true);

        /* Acquiring the JWT token from localStorage */
        const token = localStorage.getItem('JWT token')

        /* Axios configuration parameters */
        const apiUrl = 'http://localhost:8000/api/view-credentials';
        const config = {
            headers: {
                Authorization: 'Bearer ' + token
            }
        }

        /* Axios call to the backend endpoint 'view-credentials' */
        axios.get(apiUrl, config)
            .then(response => {
                setUserDiscreteCredentials(response.data)
                setIsLoading(false);
            })
            .catch(error => {
                console.log(error)
            })

    }, []);

    /* Rendering of the component using the information from the database credentialRepo collection */
    return (
        <div className={'view-credentials-wrapper'}>
            <Header/>
            <NavigationBar/>
            {/* The ternary operator that decides on whether the spinner is displayed or not */}
            {isLoading ?
                <div className={'spinner-container'}>
                    <Spinner className={'mx-auto mt-5 spinner'} animation="border" variant='light'/>
                </div> :
                <div className={'card'}>
                    <Table
                        striped
                        bordered
                        hover
                        responsive
                        className={'mt-5 table'}
                    >
                        <thead>
                        <tr>
                            <th
                                colSpan="6"
                                className={'view-credentials-table_heading h2 fw-bold text-center'}
                            >
                                Update Credentials
                            </th>
                        </tr>
                        <tr>
                            <th className={'h4 fw-bold'}>Organisational Unit</th>
                            <th className={'h4 fw-bold'}>Division</th>
                            <th className={'h4 fw-bold'}>Resource</th>
                            <th className={'h4 fw-bold'}>Username</th>
                            <th className={'h4 fw-bold'}>Password</th>
                            <th className={'h4 fw-bold'}>Update</th>
                        </tr>
                        </thead>
                        <tbody>
                        {/* Looping through the array from the backend to display individual resources and their
                         details */}
                        {userDiscreteCredentials.map((resource, index) => {
                            return (
                                <tr key={index}>
                                    <td className={'h5'}>{resource.organisationalUnitName}</td>
                                    <td className={'h5'}>{resource.divisionName}</td>
                                    <td className={'h5'}>{resource.resource}</td>
                                    <td className={'h5'}>{resource.username}</td>
                                    <td className={'h5'}>{resource.password}</td>
                                    <td className={'h5'}>
                                        {/* This link will re-route to the updateCredential component and send the
                                         state information to the component that is needed there */}
                                        <Link
                                            to={'/updateCredential'}
                                            state={{
                                                credentialRepoId: resource.credentialRepoId,
                                                resource: resource.resource,
                                                username: resource.username,
                                                password: resource.password
                                            }}
                                        >
                                            <button className={'table-btn'}>Update</button>
                                        </Link>
                                    </td>
                                </tr>
                            )
                        })}
                        </tbody>
                    </Table>
                </div>
            }
        </div>
    )
}