/**
 * Dependency modules and hooks
 */
import axios from 'axios';
import {useEffect, useState} from 'react';
import {useNavigate} from "react-router-dom";

/**
 * Import of components needed in this module
 */
import {Header} from "./Header";
import {NavigationBar} from "./NavigationBar";

/**
 * Import of the main stylesheet generated by the SCSS files and preprocessor
 */
import '../scss/main.css';

/**
 * Import of React Bootstrap components
 */
import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';

/**
 * Definition of the registration form component that will form the frontend
 * of new user registrations
 */
export const AssignDesignUsers = () => {

    /**
     * Use navigate is used to go to the login page when a user clicks on the continue button after
     * registration
     */
    const navigate = useNavigate();

    /* Non-state variables used to populate the two arrays for the organisational unit and division codes */
    const organisationalUnitCode = [];
    const divisionCode = [];

    /* Declaration and initialisation of all state variables */
    const [organisationalUnits, setOrganisationalUnits] = useState([]);
    const [divisions, setDivisions] = useState([]);
    const [email, setEmail] = useState('');
    const [userOrgUnitsList, setUserOrgUnitsList] = useState([]);
    const [userDivisionsList, setUserDivisionsList] = useState([]);
    const [orgUnitCheckedState, setOrgUnitCheckedState] = useState([]);
    const [divisionCheckedState, setDivisionCheckedState] = useState([]);
    const [isUserLoaded, setIsUserLoaded] = useState(false);


    useEffect(() => {

        /**
         * Two simultaneous axios requests to get the organisational unit and division lists from
         * the database using the relevant endpoints
         */
        const urlOrgUnits = 'http://localhost:8000/api/organisational-units';
        const urlDivisions = 'http://localhost:8000/api/divisions';

        const requestOrgUnits = axios.get(urlOrgUnits);
        const requestDivisions = axios.get(urlDivisions);

        /**
         * The axios call and subsequent setting of the organisationalUnits and divisions variabales
         */
        axios.all([requestOrgUnits, requestDivisions])
            .then(axios.spread((...responses) => {
                setOrganisationalUnits(responses[0].data);
                setDivisions(responses[1].data);
            }))
            .then(() => {
                /**
                 * Setting up the arrays of initially non-checked (false) values to keep track of which
                 * checkboxes are ticked in the form. This was set up as a second .then because the
                 * values in the first promise were needed
                 */
                setDivisionCheckedState(new Array(divisions.length).fill(false));
                setOrgUnitCheckedState(new Array(organisationalUnits.length).fill(false));
            })
            .catch(error => {
                console.log(error);
            });


    }, [divisions.length, organisationalUnits.length]);

    /**
     * Get the user's list of organisational units and divisions
     */
    const getUserFormHandler = (event) => {

        event.preventDefault();

        const token = localStorage.getItem('JWT token');

        const apiUrl = 'http://localhost:8000/api/get-user-ou-div';
        const config = {
            email: email
        }
        const headers = {
            headers: {
                Authorization: 'Bearer ' + token
            }
        }

        axios.post(apiUrl, config, headers)
            .then(response => {
                setUserDivisionsList(response.data[0]);
                setUserOrgUnitsList(response.data[1]);
                setIsUserLoaded(true);
            })
            .catch(error => {
                navigate('/reassignUserFeedback', {
                    replace: true,
                    state: {
                        status: error.request.status,
                        message: error.request.statusText
                    }
                })
            })

    }

    /**
     * This function keeps track of which checkboxes in the organisational unit
     * section have been checked.
     */
    const orgUnitCheckboxChangeHandler = (position) => {

        const updatedOrgUnitCheckedState = orgUnitCheckedState.map((checkedState, index) => {
            if (index === position) {
                return !checkedState;
            } else {
                return checkedState;
            }
        });

        setOrgUnitCheckedState(updatedOrgUnitCheckedState);

    }

    /**
     * This function keeps track of which checkboxes has been checked in the divisions section
     */
    const divisionCheckboxChangeHandler = (position) => {

        const updatedDivisionCheckedState = divisionCheckedState.map((checkedState, index) => {

            if (index === position) {
                return !checkedState;
            } else {
                return checkedState;
            }
        })

        setDivisionCheckedState(updatedDivisionCheckedState);
    }


    /**
     * All actions required upon form submission are handled in this function, including
     * the API call to the backend
     */
    const formSubmitHandler = async (event) => {

        event.preventDefault();

        /* Populating the divisionCode array */
        divisionCheckedState.forEach((checkedState, index) => {
            if (checkedState === true) {
                divisionCode.push(divisions[index].divisionCode)
            }
        })

        /* Populating the organisationalUnitCode array */
        orgUnitCheckedState.forEach((checkedState, index) => {
            if (checkedState === true) {
                organisationalUnitCode.push(organisationalUnits[index].organisationalUnitCode)
            }
        })

        /* Setting up the configuration for the axios call */
        const token = localStorage.getItem('JWT token');
        const url = 'http://localhost:8000/api/reassign-user';
        const config = {
            email: email,
            organisationalUnitCode: organisationalUnitCode,
            divisionCode: divisionCode,
        }
        const headers = {
            headers: {
                Authorization: 'Bearer ' + token
            }
        }

        /* The axios post request to the backend */
        await axios.post(url, config, headers)
            .then(response => {
                /* Navigation to the 'reassign user' feedback page for user feedback */
                navigate('/reassignUserFeedback', {
                    replace: true,
                    state: {
                        status: response.status,
                    }
                });
            })
            .catch(error => {
                navigate('/reassignUserFeedback', {
                    replace: true,
                    state: {
                        status: error.request.status,
                        message: error.request.message
                    }
                });
            })
    }


    /**
     * Rendering of the form with the help of the React Bootstrap Form component
     */
    return (
        <div className={'reassign-user-wrapper'}>
            <Header/>
            <NavigationBar/>
            {/* The React Bootstrap form component and children for the rendering of the form */}
            <Form className={'reassign-user-email'} onSubmit={getUserFormHandler}>
                <Form.Group className="mb-3 form-group" controlId="formBasicEmail">
                    <Form.Label className={'h2'}>Get User</Form.Label>
                    <Form.Control
                        type="email"
                        placeholder="Enter email"
                        onChange={event => setEmail(event.target.value)}
                    />
                </Form.Group>
                <div>
                    <Button
                        variant="primary"
                        type="submit"
                        className={'form-buttons'}
                    >
                        Get User
                    </Button>
                </div>
            </Form>
            {isUserLoaded &&
                <div>
                    <div>
                        <h2>Current Authorised Organisational Units and Divisions:</h2>
                        <div className={'reassign-user-form'}>
                            <ul>
                                <h3>Organisational Units</h3>
                                {userOrgUnitsList.map((unit, index) => {
                                    return (
                                        <li key={index}>{unit}</li>
                                    )
                                })}
                            </ul>
                            <ul>
                                <h3>Divisions</h3>
                                {userDivisionsList.map((division, index) => {
                                    return (
                                        <li key={index}>{division}</li>
                                    )
                                })}

                            </ul>
                        </div>

                        <h2 className={'update'}>Please set the new authorisations:</h2>
                    </div>
                    <Form className={'reassign-user-form'} onSubmit={formSubmitHandler}>
                        {/* A Array.prototype.map method was used to loop through and list the respective units. The
                             same technique is used below when listing the divisions */}
                        <Form.Group className={'mb-3 form-group'} controlId={'formBasicCheckbox'}>
                            <Form.Label className={'h2'}>Organisational Units</Form.Label>
                            {organisationalUnits.map((unit, index) => {
                                return (
                                    <Form.Check
                                        type="checkbox"
                                        label={unit.unitName}
                                        id={`custom-orgUnit-checkbox-${index}`}
                                        key={index}
                                        name={unit.unitName}
                                        value={unit.organisationalUnitCode}
                                        /* Setting a controlled component */
                                        checked={orgUnitCheckedState[index]}
                                        /* See function comments above */
                                        onChange={() => orgUnitCheckboxChangeHandler(index)}
                                    />
                                )
                            })}
                        </Form.Group>
                        <Form.Group className="mb-3 form-group" controlId="formBasicCheckbox">
                            <Form.Label className={'h2'}>Division</Form.Label>
                            {divisions.map((division, index) => {
                                return (
                                    <Form.Check
                                        type="checkbox"
                                        label={division.divisionName}
                                        id={`custom-division-checkbox-${index}`}
                                        key={index}
                                        name={division.divisionName}
                                        value={division.divisionCode}
                                        /* Setting a controlled component */
                                        checked={divisionCheckedState[index]}
                                        /* See function comments above */
                                        onChange={() => divisionCheckboxChangeHandler(index)}
                                    />
                                )
                            })}
                        </Form.Group>
                        <div>
                            <Button
                                variant="primary"
                                type="submit"
                                className={'form-buttons'}
                            >
                                Update
                            </Button>
                        </div>
                    </Form>
                </div>
            }
        </div>
    )
}