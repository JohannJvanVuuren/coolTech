/**
 * Dependency modules and hooks
 */
import axios from 'axios';
import {useEffect, useState} from 'react';
import {useNavigate} from "react-router-dom";

/**
 * Import of components needed in this module
 */
import {Header} from "./Header";

/**
 * Import of the main stylesheet generated by the SCSS files and preprocessor
 */
import '../scss/main.css';

/**
 * Import of React Bootstrap components
 */
import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';

/**
 * Definition of the registration form component that will form the frontend
 * of new user registrations
 */
export const Registration = () => {

    /**
     * Use navigate is used to go to the login page when a user clicks on the continue button after
     * registration
     */
    const navigate = useNavigate();

    /* Non-state variables used to populate the two arrays for the organisational unit and division codes */
    const organisationalUnitCode = [];
    const divisionCode = [];

    /* Declaration and initialisation of all state variables */
    const [organisationalUnits, setOrganisationalUnits] = useState([]);
    const [divisions, setDivisions] = useState([]);
    const [email, setEmail] = useState('');
    const [firstName, setFirstName] = useState('');
    const [surname, setSurname] = useState('');
    /* Setting the default user role as normal */
    const [role, setRole] = useState({
        normal: true,
        management: false,
        admin: false
    });
    const [orgUnitCheckedState, setOrgUnitCheckedState] = useState([]);
    const [divisionCheckedState, setDivisionCheckedState] = useState([]);
    const [password, setPassword] = useState('')

    useEffect(() => {

        /**
         * Two simultaneous axios requests to get the organisational unit and division lists from
         * the database using the relevant endpoints
         */
        const urlOrgUnits = 'http://localhost:8000/api/organisational-units';
        const urlDivisions = 'http://localhost:8000/api/divisions';

        const requestOrgUnits = axios.get(urlOrgUnits);
        const requestDivisions = axios.get(urlDivisions);

        /**
         * The axios call and subsequent setting of the organisationalUnits and divisions variabales
         */
        axios.all([requestOrgUnits, requestDivisions])
            .then(axios.spread((...responses) => {
                setOrganisationalUnits(responses[0].data);
                setDivisions(responses[1].data);
            }))
            .then((responses) => {
                /**
                 * Setting up the arrays of initially non-checked (false) values to keep track of which
                 * checkboxes are ticked in the form. This was set up as a second .then because the
                 * values in the first promise were needed
                 */
                setDivisionCheckedState(new Array(divisions.length).fill(false));
                setOrgUnitCheckedState(new Array(organisationalUnits.length).fill(false));
            })
            .catch(error => {
                console.log(error);
            });


    }, [divisions.length, organisationalUnits.length]);


    /**
     * This function handles option selections in the select component of the form
     */
    const roleSelectHandler = (event) => {

        const selectedRole = event.target.value;

        if (selectedRole === 'management') {
            const updatedRole = {
                ...role,
                normal: false,
                management: true
            }
            setRole(updatedRole);
        } else if (selectedRole === 'admin') {
            const updatedRole = {
                ...role,
                normal: false,
                admin: true
            }
            setRole(updatedRole);
        } else {
            const updatedRole = {
                ...role
            }
            setRole(updatedRole);
        }
    }

    /**
     * This function keeps track of which checkboxes in the organisational unit
     * section have been checked.
     */
    const orgUnitCheckboxChangeHandler = (position) => {

        const updatedOrgUnitCheckedState = orgUnitCheckedState.map((checkedState, index) => {
            if (index === position) {
                return !checkedState;
            } else {
                return checkedState;
            }
        });

        setOrgUnitCheckedState(updatedOrgUnitCheckedState);

    }

    /**
     * This function keeps track of which checkboxes has been checked in the divisions section
     */
    const divisionCheckboxChangeHandler = (position) => {

        const updatedDivisionCheckedState = divisionCheckedState.map((checkedState, index) => {

            if (index === position) {
                return !checkedState;
            } else {
                return checkedState;
            }
        })

        setDivisionCheckedState(updatedDivisionCheckedState);
    }


    /**
     * All actions required upon form submission are handled in this function, including
     * the API call to the backend
     */
    const formSubmitHandler = async (event) => {

        event.preventDefault();

        /* Populating the divisionCode array */
        divisionCheckedState.forEach((checkedState, index) => {
            if (checkedState === true) {
                divisionCode.push(divisions[index].divisionCode)
            }
        })

        /* Populating the organisationalUnitCode array */
        orgUnitCheckedState.forEach((checkedState, index) => {
            if (checkedState === true) {
                organisationalUnitCode.push(organisationalUnits[index].organisationalUnitCode)
            }
        })

        /* Setting up the configuration for the axios call */
        const url = 'http://localhost:8000/api/registration';
        const config = {
            email: email,
            firstName: firstName,
            surname: surname,
            role: role,
            organisationalUnitCode: organisationalUnitCode,
            divisionCode: divisionCode,
            password: password
        }

        try {
        /* The axios post request to the backend */
        await axios.post(url, config)
            .then(response => {
                /* Navigation to the registration feedback page for user feedback */
                navigate('/registrationFeedback', {
                    state: {
                        status: response.status,
                    },
                    replace: true
                })
            })
        } catch (error) {
            navigate('/registrationFeedback', {
                replace: true,
                state: {
                    status: error.request.status
                }
            })
        }
    }

    /**
     * Rendering of the form with the help of the React Bootstrap Form component
     */
    return (
        <div>
            <Header/>
            {/* The React Bootstrap form component and children for the rendering of the form */}
            <Form className={'registration-form'} onSubmit={formSubmitHandler}>
                <Form.Group className="mb-3 form-group" controlId="formBasicEmail">
                    <Form.Label className={'h2'}>Email address</Form.Label>
                    <Form.Control
                        type="email"
                        placeholder="Enter email"
                        onChange={event => setEmail(event.target.value)}
                    />
                </Form.Group>
                <Form.Group className="mb-3 form-group" controlId="formBasicText">
                    <Form.Label className={'h2'}>First Name</Form.Label>
                    <Form.Control
                        type="text"
                        placeholder="First Name"
                        onChange={event => setFirstName(event.target.value)}
                    />
                </Form.Group>
                <Form.Group className="mb-3 form-group" controlId="formBasicText">
                    <Form.Label className={'h2'}>Surname</Form.Label>
                    <Form.Control
                        type="text"
                        placeholder="Surname"
                        onChange={event => setSurname(event.target.value)}
                    />
                </Form.Group>
                {/* The default user role was set as normal using state */}
                <Form.Group className="mb-3 form-group">
                    <Form.Label className={'h2'}>Role</Form.Label>
                    <Form.Select id="role" onChange={roleSelectHandler}>
                        <option value={'normal'}>Normal</option>
                        <option value={'management'}>Management</option>
                        <option value={'admin'}>Administrator</option>
                    </Form.Select>
                </Form.Group>
                {/* A Array.prototype.map method was used to loop through and list the respective units. The
                 same technique is used below when listing the divisions */}
                <Form.Group className={'mb-3 form-group'} controlId={'formBasicCheckbox'}>
                    <Form.Label className={'h2'}>Organisational Units</Form.Label>
                    {organisationalUnits.map((unit, index) => {
                        return (
                            <Form.Check
                                type="checkbox"
                                label={unit.unitName}
                                id={`custom-orgUnit-checkbox-${index}`}
                                key={index}
                                name={unit.unitName}
                                value={unit.organisationalUnitCode}
                                /* Setting a controlled component */
                                checked={orgUnitCheckedState[index]}
                                /* See function comments above */
                                onChange={() => orgUnitCheckboxChangeHandler(index)}
                            />
                        )
                    })}
                </Form.Group>
                <Form.Group className="mb-3 form-group" controlId="formBasicCheckbox">
                    <Form.Label className={'h2'}>Division</Form.Label>
                    {divisions.map((division, index) => {
                        return (
                            <Form.Check
                                type="checkbox"
                                label={division.divisionName}
                                id={`custom-division-checkbox-${index}`}
                                key={index}
                                name={division.divisionName}
                                value={division.divisionCode}
                                /* Setting a controlled component */
                                checked={divisionCheckedState[index]}
                                /* See function comments above */
                                onChange={() => divisionCheckboxChangeHandler(index)}
                            />
                        )
                    })}
                </Form.Group>
                <Form.Group className="mb-3 form-group" controlId="formBasicPassword">
                    <Form.Label className={'h2'}>Password</Form.Label>
                    <Form.Control
                        type="password"
                        placeholder="Password"
                        onChange={event => setPassword(event.target.value)}
                    />
                </Form.Group>
                {/* The buttons were grouped together for styling reasons. */}
                <div>
                    <Button
                        variant="primary"
                        type="submit"
                        className={'form-buttons'}
                    >
                        Submit
                    </Button>
                </div>
            </Form>
        </div>
    );
}

export default axios;